using System;

public class MatrixSizeMismatchException : Exception
{
    public MatrixSizeMismatchException(string message) : base(message) { }
}

public class MatrixNotInvertibleException : Exception
{
    public MatrixNotInvertibleException(string message) : base(message) { }
}

public class SquareMatrix : ICloneable, IComparable<SquareMatrix>
{
    private int[,] _matrix;
    private int _dimension; 

    public int Dimension => _dimension; // исправил размер на размерность 

   public SquareMatrix(int dimension)
{
    if (dimension <= 0)
    {
        Console.Error.WriteLine("Размерность матрицы должна быть положительным числом.");
        return;
    }

    _dimension = dimension;
    _matrix = new int[dimension, dimension];
    Random random = new Random();

    for (int rowIndex = 0; rowIndex < dimension; rowIndex++) // исправил здесь i на rowIndex
    {
        for (int columnIndex = 0; columnIndex < dimension; columnIndex++) // исправил здесь j на columnIndex
        {
            _matrix[rowIndex, columnIndex] = random.Next(1, 10);
        }
    }
}

    public SquareMatrix(int[,] matrix)
    {
            //заменил GetLength на GetUpperBound 
    int rows = matrix.GetUpperBound(0) + 1; 
    int columns = matrix.GetUpperBound(1) + 1; 

    if (rows != columns)
    {
        //заменил throw на вывод ошибки
        Console.Error.WriteLine("Матрица должна быть квадратной.");
        return;
    }

    _dimension = rows;
    _matrix = matrix;
}        

    public static SquareMatrix operator +(SquareMatrix a, SquareMatrix b)
    {
            if (firstMatrix.Dimension != secondMatrix.Dimension)
    {
        //заменил throw на вывод ошибки и добавил возврат пустой матрицы при оишбке
        Console.Error.WriteLine("Матрицы должны быть одного размера.");
        return new SquareMatrix(0); 
    }

    int[,] resultMatrix = new int[firstMatrix.Dimension, firstMatrix.Dimension];

    for (int rowIndex = 0; rowIndex < firstMatrix.Dimension; rowIndex++)
    {
        for (int columnIndex = 0; columnIndex < firstMatrix.Dimension; columnIndex++)
        {
            resultMatrix[rowIndex, columnIndex] = firstMatrix._matrix[rowIndex, columnIndex] + secondMatrix._matrix[rowIndex, columnIndex];
        }
    }

    return new SquareMatrix(resultMatrix);
}

    public static SquareMatrix operator *(SquareMatrix a, SquareMatrix b)
    {
            if (firstMatrix.Dimension != secondMatrix.Dimension)
    {
        Console.Error.WriteLine("Матрицы должны быть одного размера.");
        return new SquareMatrix(0);  
    }

    int[,] resultMatrix = new int[firstMatrix.Dimension, firstMatrix.Dimension];

    for (int rowIndex = 0; rowIndex < firstMatrix.Dimension; rowIndex++)
    {
        for (int columnIndex = 0; columnIndex < firstMatrix.Dimension; columnIndex++)
        {
            resultMatrix[rowIndex, columnIndex] = 0;
            for (int innerIndex = 0; innerIndex < firstMatrix.Dimension; innerIndex++) 
            {
                resultMatrix[rowIndex, columnIndex] += firstMatrix._matrix[rowIndex, innerIndex] * secondMatrix._matrix[innerIndex, columnIndex];
            }
        }
    }

    return new SquareMatrix(resultMatrix);
}

    public static bool operator >(SquareMatrix firstMatrix, SquareMatrix secondMatrix)
{
    return firstMatrix.Determinant() > secondMatrix.Determinant();
}

public static bool operator <(SquareMatrix firstMatrix, SquareMatrix secondMatrix)
{
    return firstMatrix.Determinant() < secondMatrix.Determinant();
}

public static bool operator ==(SquareMatrix firstMatrix, SquareMatrix secondMatrix)
{
    return firstMatrix.Equals(secondMatrix);
}

public static bool operator !=(SquareMatrix firstMatrix, SquareMatrix secondMatrix)
{
    return !firstMatrix.Equals(secondMatrix);
}

public static explicit operator int(SquareMatrix matrix)
{
    return matrix.Determinant();
}

public static bool operator true(SquareMatrix matrix)
{
    return matrix.Determinant() != 0;
}

public static bool operator false(SquareMatrix matrix)
{
    return matrix.Determinant() == 0;
}

public int Determinant()
{
    if (_dimension == 1)
        return _matrix[0, 0];
    if (_dimension == 2)
        return _matrix[0, 0] * _matrix[1, 1] - _matrix[0, 1] * _matrix[1, 0];

    int determinant = 0;
    for (int columnIndex = 0; columnIndex < _dimension; columnIndex++) 
    {
        determinant += (int)Math.Pow(-1, columnIndex) * _matrix[0, columnIndex] * GetMinor(0, columnIndex).Determinant();
    }
    return determinant;
}

    private SquareMatrix Minor(int row, int col)
    {
        int[,] minorMatrix = new int[size - 1, size - 1];
        for (int i = 0, mi = 0; i < size; i++)
        {
            if (i == row) continue;
            for (int j = 0, mj = 0; j < size; j++)
            {
                if (j == col) continue;
                minorMatrix[mi, mj] = matrix[i, j];
                mj++;
            }
            mi++;
        }
        return new SquareMatrix(minorMatrix);
    }

    public SquareMatrix Inverse()
    {
        int det = Determinant();
        if (det == 0)
            throw new MatrixNotInvertibleException("Матрица не обратима.");

        int[,] inverseMatrix = new int[size, size];
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                inverseMatrix[i, j] = (int)Math.Pow(-1, i + j) * Minor(j, i).Determinant();
            }
        }

        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                inverseMatrix[i, j] /= det;
            }
        }
        return new SquareMatrix(inverseMatrix);
    }

    public object Clone()
    {
        int[,] copy = new int[size, size];
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                copy[i, j] = matrix[i, j];
            }
        }
        return new SquareMatrix(copy);
    }

    public int CompareTo(SquareMatrix other)
    {
        return Determinant().CompareTo(other.Determinant());
    }

    public override bool Equals(object obj)
    {
        if (obj is SquareMatrix other)
        {
            if (this.size != other.size)
                return false;

            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    if (this.matrix[i, j] != other.matrix[i, j])
                        return false;
                }
            }
            return true;
        }
        return false;
    }

    public override int GetHashCode()
    {
        return matrix.GetHashCode();
    }

    public override string ToString()
    {
        string result = "";
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                result += matrix[i, j] + " ";
            }
            result += "\n";
        }
        return result;
    }
}

public class MatrixSizeMismatchException : Exception
{
    public MatrixSizeMismatchException(string message) : base(message) { }
}

public class MatrixNotInvertibleException : Exception
{
    public MatrixNotInvertibleException(string message) : base(message) { }
}

class Program
{
    static void Main(string[] args)
    {
        SquareMatrix matrix1 = new SquareMatrix(3);
        SquareMatrix matrix2 = new SquareMatrix(3);

        Console.WriteLine("Матрица 1:");
        Console.WriteLine(matrix1);

        Console.WriteLine("Матрица 2:");
        Console.WriteLine(matrix2);

        SquareMatrix sumMatrix = matrix1 + matrix2;
        Console.WriteLine("Сумма матриц:");
        Console.WriteLine(sumMatrix);

        SquareMatrix productMatrix = matrix1 * matrix2;
        Console.WriteLine("Произведение матриц:");
        Console.WriteLine(productMatrix);

        Console.WriteLine("Детерминант матрицы 1: " + matrix1.Determinant());
        Console.WriteLine("Детерминант матрицы 2: " + matrix2.Determinant());

        Console.WriteLine("Матрица 1 > Матрица 2: " + (matrix1 > matrix2));
        Console.WriteLine("Матрица 1 < Матрица 2: " + (matrix1 < matrix2));

        SquareMatrix clonedMatrix = (SquareMatrix)matrix1.Clone();
        Console.WriteLine("Клонированная матрица 1:");
        Console.WriteLine(clonedMatrix);

        Console.WriteLine("Матрица 1 == Клонированная матрица: " + (matrix1 == clonedMatrix));
    }
}
